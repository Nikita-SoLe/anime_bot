from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.db_buttons import genre, anime_dict, feature_film, OVA, serials, specials


def get_subscribed_kb() -> InlineKeyboardMarkup:

    builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    builder.button(text='Kon-Anime', url='https://t.me/kon_anime')

    return builder.as_markup()


def main_menu_btn() -> InlineKeyboardMarkup:

    builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    builder.button(text='‚¨á –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨á', callback_data='main_menu')

    return builder.as_markup()


def get_pagination_btn(names, page_num) -> list:

    row_with_three_buttons = [
        InlineKeyboardButton(text='‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data='previous_page'),
        InlineKeyboardButton(text=f'{page_num} / {len(names) // 10 if len(names) % 10 == 0 else (len(names) // 10) + 1}',
                             callback_data='done'),
        InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', callback_data='next_page')
    ]

    return row_with_three_buttons


def genre_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ –∞–Ω–∏–º–µ.
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∂–∞–Ω—Ä–æ–≤ –∞–Ω–∏–º–µ.
    """
    builder: InlineKeyboardBuilder = InlineKeyboardBuilder()

    for key in genre.keys():
        builder.button(text=f'{key}', callback_data=f'{key}')

    builder.adjust(4)
    builder.row(InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))

    return builder.as_markup()


def anime_keyboard(genr, start=1, state: str = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–Ω–∏–º–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    Args:
        genr (str): –í—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä –∞–Ω–∏–º–µ.
        start (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        state (str): –ü–µ—Ä–µ–¥–∞–µ—Ç –∏–∑ –∫–∞–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–∑—ã–≤–∞—é—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–Ω–∏–º–µ.
    """

    if state == 'all':
        names = genre[genr]['name']
    elif state == 'feature_film':
        names = feature_film[genr]
    elif state == 'serials':
        names = serials[genr]
    elif state == 'OVA':
        names = OVA[genr]
    else:
        names = specials[genr]

    builder = InlineKeyboardBuilder()

    page_num = start

    if start == 1:
        stop = start * 10

        if len(names) >= stop:
            for i in range(0, stop):
                builder.row(InlineKeyboardButton(text=names[i], callback_data=f'{i}'), width=1)
        else:
            for i in range(0, len(names)):
                builder.row(InlineKeyboardButton(text=names[i], callback_data=f'{i}'), width=1)
    else:
        stop = start * 10
        start = (start - 1) * 10

        if len(names) >= stop:
            for i in range(start, stop):
                builder.row(InlineKeyboardButton(text=names[i], callback_data=f'{i}'), width=1)
        else:
            for i in range(start, len(names)):
                builder.row(InlineKeyboardButton(text=names[i], callback_data=f'{i}'), width=1)

    builder.adjust(1)

    builder.row(*get_pagination_btn(page_num=page_num, names=names))
    builder.row(InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))

    return builder.as_markup()


def description_kb(name) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∏–º–µ.
    Args:
        name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ.
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∏–º–µ.
    """
    builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    builder.button(text='‚ñ∂Ô∏è~~–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É~~‚ñ∂Ô∏è', url=anime_dict[name]['url'])
    builder.button(text='üîô~~–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É~~üîô', callback_data='come_back')

    builder.adjust(1)

    return builder.as_markup()


def anime_search_kb(names, page: int = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∏–º–µ.
    Args:
        names: –ü–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ.
        page (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∏–º–µ.
    """
    builder: InlineKeyboardBuilder = InlineKeyboardBuilder()

    if not page:
        for name in names:
            builder.button(text=str(name[1]), callback_data=f'{name[0]}')
            builder.adjust(1)
    else:
        start = (page - 1) * 10
        stop = page * 10

        if stop < len(names):
            for i in range(start, stop):
                builder.button(text=str(names[i][1]), callback_data=f'{names[i][0]}')
        else:
            for i in range(start, len(names)):
                builder.button(text=str(names[i][1]), callback_data=f'{names[i][0]}')

        builder.adjust(1)
        builder.row(*get_pagination_btn(names=names, page_num=page))
        builder.row(InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ üîé", callback_data='find_another'))

    return builder.as_markup()

